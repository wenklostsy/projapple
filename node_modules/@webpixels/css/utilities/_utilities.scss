// Utilities

@import "static/background";
@import "static/gradient";
@import "static/filter";

// Transitions
@import "bootstrap/scss/transitions";

// Static utilities
@import "static/transform";
@import "static/animation";
@import "static/height-calc";
@import "static/helpers";

$utilities: (
    "viewport-height": null,
    "min-viewport-height": null,
    "min-viewport-width": null,
    "viewport-width": null,
    "border": null,
    "opacity": (
        property: opacity,
        values: (
            0: 0,
            10: 0.1,
            20: 0.2,
            30: 0.3,
            40: 0.4,
            50: 0.5,
            60: 0.6,
            70: 0.7,
            80: 0.8,
            90: 0.9,
            100: 1
        )
    ),
    "zindex": (
        property: z-index,
        class: overlap,
        values: (
            10: 10,
            20: 20,
            30: 30,
            40: 40,
            50: 50,
            100: 100,
            200: 200,
            300: 300,
            400: 400,
            500: 500,
            1000: 1000,
            auto: auto
        )
    ),

    // Border radius
    "rounded": (
        property: border-radius,
        class: rounded,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-top": (
        property: border-top-left-radius border-top-right-radius,
        class: rounded-top,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-end": (
        property: border-top-right-radius border-bottom-right-radius,
        class: rounded-end,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-bottom": (
        property: border-bottom-right-radius border-bottom-left-radius,
        class: rounded-bottom,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-start": (
        property: border-bottom-left-radius border-top-left-radius,
        class: rounded-start,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-top-start": (
        property: border-top-left-radius,
        class: rounded-top-start,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-top-end": (
        property: border-top-right-radius,
        class: rounded-top-end,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-bottom-end": (
        property: border-bottom-right-radius,
        class: rounded-bottom-end,
        responsive: true,
        values: $utilities-border-radius
    ),
    "rounded-bottom-start": (
        property: border-bottom-left-radius,
        class: rounded-bottom-start,
        responsive: true,
        values: $utilities-border-radius
    ),

    // Border
    "border-width": (
        property: border-width,
        class: border,
        responsive: true,
        state: hover focus,
        values: $utilities-border-widths
    ),
    "border-top": (
        property: border-top-width,
        class: border-top,
        responsive: true,
        state: hover focus,
        values: $utilities-border-widths
    ),
    "border-end": (
        property: border-right-width,
        class: border-end,
        responsive: true,
        state: hover focus,
        values: $utilities-border-widths
    ),
    "border-bottom": (
        property: border-bottom-width,
        class: border-bottom,
        responsive: true,
        state: hover focus,
        values: $utilities-border-widths
    ),
    "border-start": (
        property: border-left-width,
        class: border-start,
        responsive: true,
        state: hover focus,
        values: $utilities-border-widths
    ),

    // Border color
    "border-color": (
        property: border-color,
        class: border,
        responsive: true,
        state: hover focus focus-within,
        values: map-merge(
            $theme-colors,
            (
                "transparent": transparent,
                "current": currentColor,
                "base": $border-color,
                "body": $body-bg,
                "card": $card-bg,
                "black": $black,
                "white": $white
            )
        )
    ),

    // Border style
    "border-style": (
        property: border-style,
        class: border,
        responsive: true,
        values: solid dashed dotted double groove none
    ),

    // Cursor
    "cursor": (
        property: cursor,
        class: cursor,
        responsive: false,
        values: auto pointer wait text,
    ),


    // Fonts and Text
    "font-family": (
        property: font-family,
        class: font,
        values: (
            base: var(--#{$variable-prefix}font-sans-serif),
            display: var(--#{$variable-prefix}font-display),
            serif: var(--#{$variable-prefix}font-serif),
            code: var(--#{$variable-prefix}font-monospace)
        )
    ),
    "font-size": (
        rfs: true,
        property: font-size,
        class: text,
        values: (
            xs: $font-size-xs,
            sm: $font-size-sm,
            base: $font-size-base,
            md: $font-size-md,
            lg: $font-size-lg,
            xl: $font-size-xl,
            2xl: $font-size-2xl
        )
    ),
    "font-style": (
        property: font-style,
        class: font,
        values: italic normal
    ),
    "font-weight": (
        property: font-weight,
        class: font,
        values: (
            light: $font-weight-light,
            lighter: $font-weight-lighter,
            regular: $font-weight-normal,
            semibold: $font-weight-semibold,
            bold: $font-weight-bold,
            bolder: $font-weight-bolder
        )
    ),
    "text-transform": (
        property: text-transform,
        class: text,
        values: lowercase uppercase capitalize,
    ),
    "text-align": (
        property: text-align,
        class: text,
        responsive: true,
        values: (
            start: left,
            end: right,
            center: center,
        )
    ),
    "text-decoration": (
        property: text-decoration,
        class: text,
        responsive: false,
        values: (
            no-decoration: none,
            underline: underline,
            line-through: line-through
        )
    ),
    "line-height": (
        property: line-height,
        class: lh,
        values: (
            none: 1,
            tighter: 1.125,
            tight: 1.2,
            snug: 1.375,
            normal: 1.5,
            relaxed: 1.625,
            loose: 2
        )
    ),
    "letter-spacing": (
        property: letter-spacing,
        class: ls,
        values: (
            tighter: -0.05em,
            tight: -0.025em,
            normal: 0,
            wide: 0.025em,
            wider: 0.05em,
            widest: 0.1em
        )
    ),
    "color": (
        property: color,
        class: text,
        responsive: true,
        state: hover focus,
        local-vars: (
            "text-opacity": 1
        ),
        values: $utilities-text-colors
    ),
    "static-color": (
        property: color,
        class: text,
        responsive: true,
        state: hover focus,
        values: $utilities-static-text-colors
    ),
    "text-opacity": (
        css-var: true,
        class: text-opacity,
        state: hover focus,
        values: (
            10: .1,
            20: .2,
            30: .3,
            40: .4,
            50: .5,
            60: .6,
            70: .7,
            80: .8,
            90: .9,
            100: 1
        )
    ),

    // Background
    "background-color": (
        property: background-color,
        class: bg,
        state: hover focus focus-within,
        local-vars: (
            "bg-opacity": 1
        ),
        values: $utilities-bg-colors
    ),
    "static-background-color": (
        property: background-color,
        class: bg,
        state: hover focus focus-within,
        values: $utilities-static-bg-colors
    ),
    "bg-opacity": (
        css-var: true,
        class: bg-opacity,
        state: hover focus,
        values: (
            10: .1,
            20: .2,
            30: .3,
            40: .4,
            50: .5,
            60: .6,
            70: .7,
            80: .8,
            90: .9,
            100: 1
        )
    ),
    "background-size": (
        property: background-size,
        class: bg,
        values: auto cover contain
    ),
    "background-clip": (
        property: background-clip,
        class: bg-clip,
        values: (
            border: border-box,
            padding: padding-box,
            content: content-box,
            text: text
        )
    ),

    // Shadow
    "shadow": (
        property: box-shadow,
        class: shadow,
        responsive: true,
        state: hover focus,
        values: $utilities-shadows
    ),
    "soft-shadow": (
        property: box-shadow,
        class: shadow-soft,
        responsive: true,
        state: hover focus,
        values: $utilities-soft-shadows
    ),

    // Widths
    "width": (
        property: width,
        class: w,
        responsive: true,
        values: map-collect(
            $spacers,
            $percentage-sizers,
            $screen-widths,
            (
                auto: auto,
                full: 100%,
                screen: 100vw,
                min: min-content,
                max: max-content
            )
        )
    ),
    "min-width": (
        property: min-width,
        class: min-w,
        responsive: true,
        values: (
            0: 0,
            full: 100%,
            min: min-content,
            max: max-content
        )
    ),
    "max-width": (
        property: max-width,
        class: max-w,
        responsive: true,
        values: map-collect(
            $screen-widths,
            (
                0: 0,
                full: 100%,
                read: 65ch,
                min: min-content,
                max: max-content
            )
        ),
    ),

    // Heights
    "height": (
        property: height,
        class: h,
        responsive: true,
        values: map-collect(
            $spacers,
            $percentage-sizers,
            (
                px: 1px,
                auto: auto,
                full: 100%,
                screen: 100vh
            )
        )
    ),
    "min-height": (
        property: min-height,
        class: min-h,
        responsive: true,
        values: (
            0: 0,
            full: 100%,
            screen: 100vh
        )
    ),
    "max-height": (
        property: max-height,
        class: max-h,
        responsive: true,
        values: map-collect(
            $spacers,
            (
                px: 1px,
                full: 100%,
                screen: 100vh
            )
        )
    ),

    // Position
    "position": (
        property: position,
        responsive: true,
        values: static relative absolute fixed sticky,
    ),
    "top": (
        property: top,
        responsive: true,
        values: map-merge($spacers, $position-values)
    ),
    "end": (
        property: right,
        class: end,
        responsive: true,
        values: map-merge($spacers, $position-values)
    ),
    "bottom": (
        property: bottom,
        class: bottom,
        responsive: true,
        values: map-merge($spacers, $position-values)
    ),
    "start": (
        property: left,
        class: start,
        responsive: true,
        values: map-merge($spacers, $position-values)
    ),

    // Flex
    "flex": (
        property: flex,
        responsive: true,
        values: (
            1: 1 1 0%,
            fill: 1 1 auto,
            initial: 0 1 auto,
            none: none
        )
    ),
    "align-content": (
        property: align-content,
        responsive: true,
        values: (
            start: flex-start,
            end: flex-end,
            center: center,
            between: space-between,
            around: space-around,
            evenly: space-evenly,
            stretch: stretch
        )
    ),
    "place-content": (
        property: place-content,
        responsive: true,
        values: (
            start: flex-start,
            end: flex-end,
            center: center,
            between: space-between,
            around: space-around,
            evenly: space-evenly,
            stretch: stretch,
        )
    ),

    // Overflow
    "overflow": (
        property: overflow,
        responsive: true,
        values: auto hidden visible scroll
    ),
    "overflow-x": (
        property: overflow-x,
        responsive: true,
        values: auto hidden visible scroll
    ),
    "overflow-y": (
        property: overflow-y,
        responsive: true,
        values: auto hidden visible scroll
    ),

    // Transitions
    "transition-property": (
        property: transition-property,
        class: transition,
        responsive: true,
        values: (
            null: $transition-property,
            none: none,
            all: all,
            colors: $transition-property-colors,
            opacity: opacity,
            shadow: box-shadow,
            transform: transform,
        ),
    ),
    "transition-timing-function": (
        property: transition-timing-function,
        class: ease,
        responsive: true,
        values: (
            base: $transition-timing-function,
            linear: linear,
            in: $transition-in-timing-function,
            out: $transition-out-timing-function,
            in-out: $transition-in-out-timing-function,
        )
    ),
    "transition-duration": (
        property: transition-duration,
        class: duration,
        values: (
            base: 150ms,
            75: 75ms,
            100: 100ms,
            150: 150ms,
            200: 200ms,
            300: 300ms,
            500: 500ms,
            700: 700ms,
            1000: 1000ms,
        )
    ),
    "transition-delay": (
        property: transition-delay,
        class: delay,
        values: (
            75: 75ms,
            100: 100ms,
            150: 150ms,
            200: 200ms,
            300: 300ms,
            500: 500ms,
            700: 700ms,
            1000: 1000ms,
        )
    ),
    "animation": (
        property: animation,
        values: (
            none: none,
            spin: spin 1s linear infinite,
            ping: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite,
            pulse: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite,
            bounce: bounce 1s infinite,
            slide-left: slideLeft 3s infinite,
            slide-right: slideRight 3s infinite,
            move-slow-left: slideLeft 15s linear infinite,
            move-slow-right: slideRight 15s linear infinite,
        )
    ),

    // Filter
    "blur": (
        property: --#{$variable-prefix}blur,
        class: blur,
        values: (
            5: 5px,
            10: 10px,
            25: 25px,
            50: 50px,
            75: 75px,
            100: 100px,
            125: 125px,
            150: 150px,
            200: 200px
        )
    ),

    // Transforms
    "transform": (
        property: transform,
        values: none,
        responsive: true
    ),
    "transform-origin": (
        property: transform-origin,
        class: origin,
        responsive: true,
        values: (
            center: center,
            top: top,
            top-right: top right,
            right: right,
            bottom-right: bottom right,
            bottom: bottom,
            bottom-left: bottom left,
            left: left,
            top-left: top left
        )
    ),
    "scale": (
        property: --#{$variable-prefix}scale-x --#{$variable-prefix}scale-y,
        class: scale,
        state: hover focus,
        responsive: true,
        values: $utilities-scale-values
    ),
    "scale-y": (
        property: --#{$variable-prefix}-scale-y,
        class: scale-y,
        state: hover focus,
        responsive: true,
        values: $utilities-scale-values
    ),
    "scale-x": (
        property: --#{$variable-prefix}-scale-x,
        class: scale-x,
        state: hover focus,
        responsive: true,
        values: $utilities-scale-values
    ),
    "rotate":  (
        property: --#{$variable-prefix}rotate,
        class: rotate,
        state: hover focus,
        responsive: true,
        values: $utilities-rotate-values
    ),
    "negative-rotate":  (
        property: --#{$variable-prefix}rotate,
        class: rotate,
        state: hover focus,
        responsive: true,
        values: negativify-map($utilities-rotate-values)
    ),
    "rotate-y":  (
        property: --#{$variable-prefix}rotate-y,
        class: rotate-y,
        state: hover focus,
        responsive: true,
        values: $utilities-rotate-values
    ),
    "negative-rotate-y": (
        property: --#{$variable-prefix}rotate-y,
        class: rotate-y,
        state: hover focus,
        responsive: true,
        values: negativify-map($utilities-rotate-values)
    ),
    "rotate-x":  (
        property: --#{$variable-prefix}rotate-x,
        class: rotate-x,
        state: hover focus,
        responsive: true,
        values: $utilities-rotate-values
    ),
    "negative-rotate-x": (
        property: --#{$variable-prefix}rotate-x,
        class: rotate-x,
        state: hover focus,
        responsive: true,
        values: negativify-map($utilities-rotate-values)
    ),
    "perspective": (
        property: --#{$variable-prefix}perspective,
        class: perspective,
        state: hover focus,
        responsive: true,
        values: $utilities-perspective-values
    ),
    "translate-y": (
        property: --#{$variable-prefix}translate-y,
        class: translate-y,
        state: hover focus,
        responsive: true,
        values: $utilities-translate-values
    ),
    "negative-translate-y": (
        property: --#{$variable-prefix}translate-y,
        class: translate-y,
        state: hover focus,
        responsive: true,
        values: negativify-map($utilities-translate-values)
    ),
    "translate-x": (
        property: --#{$variable-prefix}translate-x,
        class: translate-x,
        state: hover focus,
        responsive: true,
        values: $utilities-translate-values
    ),
    "negative-translate-x": (
        property: --#{$variable-prefix}translate-x,
        class: translate-x,
        state: hover focus,
        responsive: true,
        values: negativify-map($utilities-translate-values)
    ),
    "skew-y": (
        property: --#{$variable-prefix}skew-y,
        class: skew-y,
        state: hover focus,
        values: $utilities-skew-values
    ),
    "negative-skew-y": (
        property: --#{$variable-prefix}skew-y,
        class: skew-y,
        state: hover focus,
        values: negativify-map($utilities-skew-values)
    ),
    "skew-x": (
        property: --#{$variable-prefix}skew-x,
        class: skew-x,
        state: hover focus,
        values: $utilities-skew-values
    ),
    "negative-skew-x": (
        property: --#{$variable-prefix}skew-x,
        class: skew-x,
        state: hover focus,
        values: negativify-map($utilities-skew-values)
    )
);
